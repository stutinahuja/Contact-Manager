{"version":3,"file":"table-data-source.js","sourceRoot":"","sources":["../../src/table-data-source.ts"],"names":[],"mappings":"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","sourcesContent":["import { DataSource } from '@angular/cdk/collections';\r\n\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { TableElement } from './table-element';\r\nimport { ValidatorService } from './validator.service';\r\nimport { DefaultValidatorService } from './default-validator.service';\r\n\r\n\r\nexport class TableDataSource<T> extends DataSource<TableElement<T>> {\r\n\r\n  private rowsSubject: BehaviorSubject<TableElement<T>[]>;\r\n  datasourceSubject: Subject<T[]>;\r\n\r\n  private dataConstructor: new () => T;\r\n  private dataKeys: any[];\r\n\r\n  private currentData: any;\r\n\r\n  /**\r\n   * Creates a new TableDataSource instance, that can be used as datasource of `@angular/cdk` data-table.\r\n   * @param data Array containing the initial values for the TableDataSource. If not specified, then `dataType` must be specified.\r\n   * @param dataType Type of data contained by the Table. If not specified, then `data` with at least one element must be specified.\r\n   * @param validatorService Service that create instances of the FormGroup used to validate row fields.\r\n   * @param config Additional configuration for table.\r\n   */\r\n  constructor(\r\n    data: T[],\r\n    dataType?: new () => T,\r\n    private validatorService?: ValidatorService,\r\n    private config = { prependNewElements: false })\r\n  {\r\n    super();\r\n\r\n    if (!validatorService)\r\n      this.validatorService = new DefaultValidatorService();\r\n\r\n    if (dataType) {\r\n      this.dataConstructor = dataType;\r\n    } else {\r\n      if (data && data.length > 0)\r\n        this.dataKeys = Object.keys(data[0]);\r\n      else\r\n        throw new Error('You must define either a non empty array, or an associated class to build the table.');\r\n    }\r\n\r\n    this.rowsSubject = new BehaviorSubject(this.getRowsFromData(data));\r\n    this.datasourceSubject = new Subject<T[]>();\r\n  }\r\n\r\n  /**\r\n   * Start the creation of a new element, pushing an empty-data row in the table.\r\n   */\r\n  createNew(): void {\r\n    const source = this.rowsSubject.getValue();\r\n\r\n    if (!this.existsNewElement(source)) {\r\n\r\n      const newElement = new TableElement({\r\n        id: -1,\r\n        editing: true,\r\n        currentData: this.createNewObject(),\r\n        source: this,\r\n        validator: this.validatorService.getRowValidator(),\r\n      });\r\n\r\n      if (this.config.prependNewElements) {\r\n        this.rowsSubject.next([newElement].concat(source));\r\n      } else {\r\n        source.push(newElement);\r\n        this.rowsSubject.next(source);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Confirm creation of the row. Save changes and disable editing.\r\n   * If validation active and row data is invalid, it doesn't confirm creation neither disable editing.\r\n   * @param row Row to be confirmed.\r\n   */\r\n  confirmCreate(row: TableElement<T>): boolean {\r\n    if (!row.validator.valid) {\r\n      return false\r\n    }\r\n\r\n    const source = this.rowsSubject.getValue();\r\n    row.id = source.length - 1;\r\n    this.rowsSubject.next(source);\r\n\r\n    row.editing = false;\r\n    row.validator.disable();\r\n\r\n    this.updateDatasourceFromRows(source);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Confirm edition of the row. Save changes and disable editing.\r\n   * If validation active and row data is invalid, it doesn't confirm editing neither disable editing.\r\n   * @param row Row to be edited.\r\n   */\r\n  confirmEdit(row: TableElement<T>): boolean {\r\n    if (!row.validator.valid) {\r\n      return false;\r\n    }\r\n\r\n    const source = this.rowsSubject.getValue();\r\n    const index = this.getIndexFromRowId(row.id, source);\r\n\r\n    source[index] = row;\r\n    this.rowsSubject.next(source);\r\n\r\n    row.editing = false;\r\n    row.validator.disable();\r\n\r\n    this.updateDatasourceFromRows(source);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Delete the row with the index specified.\r\n   */\r\n  delete(id: number): void {\r\n    const source = this.rowsSubject.getValue();\r\n    const index = this.getIndexFromRowId(id, source);\r\n\r\n    source.splice(index, 1);\r\n    this.updateRowIds(index, source);\r\n\r\n    this.rowsSubject.next(source);\r\n\r\n    if (id != -1)\r\n      this.updateDatasourceFromRows(source);\r\n  }\r\n\r\n  /**\r\n * Get row from the table.\r\n * @param id Id of the row to retrieve, -1 returns the current new line.\r\n */\r\n  getRow(id: number): TableElement<T> {\r\n    const source = this.rowsSubject.getValue();\r\n    const index = this.getIndexFromRowId(id, source);\r\n\r\n    return (index >= 0 && index < source.length) ? source[index] : null;\r\n  }\r\n\r\n  /**\r\n   * Update the datasource with a new array of data. If the array reference\r\n   * is the same as the previous one, it doesn't trigger an update.\r\n   * @param data Data to update the table datasource.\r\n   * @param options Specify options to update the datasource.\r\n   * If emitEvent is true and the datasource is updated, it emits an event\r\n   * from 'datasourceSubject' with the updated data. If false, it doesn't\r\n   * emit an event. True by default.\r\n   */\r\n  updateDatasource(data: T[], options = { emitEvent: true }): void {\r\n    if (this.currentData !== data) {\r\n      this.currentData = data;\r\n      this.rowsSubject.next(this.getRowsFromData(data))\r\n\r\n      if (options.emitEvent)\r\n        this.datasourceSubject.next(data);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Checks the existance of the a new row (not yet saved).\r\n   * @param source \r\n   */\r\n  private existsNewElement(source: TableElement<T>[]): boolean {\r\n      return !(source.length == 0 || source[this.getNewRowIndex(source)].id > -1)\r\n  }\r\n\r\n  /**\r\n   * Returns the possible index of the new row depending on the insertion type.\r\n   * It doesn't imply that the new row is created, that must be checked.\r\n   * @param source \r\n   */\r\n  private getNewRowIndex(source): number {\r\n    if (this.config.prependNewElements)\r\n      return 0;\r\n    else\r\n      return source.length - 1;\r\n  }\r\n\r\n  /**\r\n   * Returns the row id from the index specified. It does\r\n   * not consider if the new row is present or not, assumes\r\n   * that new row is not present.\r\n   * @param index Index of the array.\r\n   * @param count Quantity of elements in the array.\r\n   */\r\n  private getRowIdFromIndex(index: number, count: number): number {\r\n    if (this.config.prependNewElements)\r\n      return count - 1 - index;\r\n    else\r\n      return index;\r\n  }\r\n\r\n  /**\r\n   * Returns the index from the row id specified.\r\n   * It takes into account if the new row exists or not.\r\n   * @param id \r\n   * @param source\r\n   */\r\n  private getIndexFromRowId(id: number, source: TableElement<T>[]): number {\r\n    if(id == -1) {\r\n      return this.existsNewElement(source) ? this.getNewRowIndex(source) : -1;\r\n    } else {\r\n      if (this.config.prependNewElements)\r\n          return source.length - 1 - id;\r\n      else\r\n        return id;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update rows ids in the array specified, starting in the specified index\r\n   * until the start/end of the array, depending on config.prependNewElements\r\n   * configuration.\r\n   * @param initialIndex Initial index of source to be updated.\r\n   * @param source Array that contains the rows to be updated.\r\n   */\r\n  private updateRowIds(initialIndex: number, source: TableElement<T>[]): void {\r\n\r\n    const delta = this.config.prependNewElements ? -1 : 1;\r\n\r\n    for (let index = initialIndex; index < source.length && index >= 0; index += delta) {\r\n      if (source[index].id != -1)\r\n        source[index].id = this.getRowIdFromIndex(index, source.length);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the data from the rows.\r\n   * @param rows Rows to extract the data.\r\n   */\r\n  private getDataFromRows(rows: TableElement<T>[]): T[] {\r\n    return rows\r\n      .filter(row => row.id != -1)\r\n      .map<T>((row) => {\r\n      return row.originalData ? row.originalData : row.currentData;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update the datasource with the data contained in the specified rows.\r\n   * @param rows Rows that contains the datasource's new data.\r\n   */\r\n  private updateDatasourceFromRows(rows: TableElement<T>[]): void {\r\n    this.currentData = this.getDataFromRows(rows);\r\n    this.datasourceSubject.next(this.currentData);\r\n  }\r\n\r\n  /**\r\n   * From an array of data, it returns rows containing the original data.\r\n   * @param arrayData Data from which create the rows.\r\n   */\r\n  private getRowsFromData(arrayData: T[]): TableElement<T>[] {\r\n    return arrayData.map<TableElement<T>>((data, index) => {\r\n\r\n      const validator = this.validatorService.getRowValidator();\r\n      validator.disable();\r\n\r\n      return new TableElement({\r\n        id: this.getRowIdFromIndex(index, arrayData.length),\r\n        editing: false,\r\n        currentData: data,\r\n        source: this,\r\n        validator: validator,\r\n      })\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a new object with identical structure than the table source data.\r\n   * It uses the object's type contructor if available, otherwise it creates\r\n   * an object with the same keys of the first element contained in the original\r\n   * datasource (used in the constructor).\r\n   */\r\n  private createNewObject(): T {\r\n    if (this.dataConstructor)\r\n      return new this.dataConstructor();\r\n    else {\r\n      return this.dataKeys.reduce((obj, key) => {\r\n        obj[key] = undefined;\r\n        return obj;\r\n      }, {});\r\n    }\r\n\r\n  }\r\n\r\n  /** Connect function called by the table to retrieve one stream containing\r\n   *  the data to render. */\r\n  connect(): Observable<TableElement<T>[]> {\r\n    return this.rowsSubject.asObservable();\r\n  }\r\n\r\n  disconnect() { }\r\n}\r\n"]}